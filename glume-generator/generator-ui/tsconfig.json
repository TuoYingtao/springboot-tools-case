{
  "files": [],
  "include": [
    "**/*.ts",
    "src/**/*.d.ts",
    "src/type/**/*.d.ts",
    "src/**/*.ts",
    "src/**/*.tsx",
    "src/**/*.vue"
  ],
  "exclude": [
    "src/**/__tests__/*",
    "node_modules"
  ],
  "compileOnSave": false,
  "compilerOptions": {
    /* 基本选项 */
    "incremental": true,                          // TS编译器在第一次编译之后会生成一个存储编译信息的文件，第二次编译会在第一次的基础上进行增量编译，可以提高编译的速度
    "tsBuildInfoFile": "./buildFile",             // 增量编译文件的存储位置
    "target": "esnext",                           // 目标语言的版本: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', or 'ESNEXT'.
    "module": "esnext",                           // 生成代码的模板标准: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'.
    "lib": [                                      // 指定要包含在编译中的库文件。
      "esnext",
      "dom"
    ],
    "allowJs": true,                              // 允许编译器编译 JS，JSX 文件
    "checkJs": true,                              // 允许在 JS 文件中报错，通常与 allowJS 一起使用
    "jsx": "preserve",                            // 指定 JSX 代码生成：“preserve”、“react-native”或“react”。
    "declaration": true,                          // 生成声明文件，开启后会自动生成声明文件
    "declarationDir": "./file",                   // 指定生成声明文件存放目录
    "declarationMap": true,                       // 为声明文件生成 sourceMap '.d.ts' file.
    "sourceMap": true,                            // 生成目标文件的 sourceMap 文件
    "outFile": "./",                              // 将多个相互依赖的文件生成一个文件，可以用在AMD模块中，即开启时应设置"module": "AMD"
    "outDir": "./",                               // 指定输出目录
    "rootDir": "./",                              // 指定输出文件目录(用于输出)，用于控制输出目录结构
    "composite": true,                            // 指定输出文件目录(用于输出)，用于控制输出目录结构
    "removeComments": true,                       // 删除注释
    "noEmit": true,                               // 不输出文件,即编译后不会生成任何js文件
    "noEmitOnError": true,                        // 发送错误时不输出任何文件
    "noEmitHelpers": true,                        // 不生成helper函数，减小体积，需要额外安装，常配合importHelpers一起使用
    "importHelpers": true,                        // 通过 tslib 引入helper 函数，文件必须是模块
    "downlevelIteration": true,                   // 降级遍历器实现，如果目标源是 Es3/Es5 ，那么遍历器会有降级的实现
    "isolatedModules": true,                      // 将每个文件转换为单独的模块（类似于“ts.transpileModule”）
    "resolveJsonModule": true,                    // 启用导入.json文件

    /* 严格的类型检查选项 */
    "strict": true,                               // 开启所有严格的类型检查
    "noImplicitAny": true,                        // 不允许隐式的 any 类型
    "strictNullChecks": true,                     // 不允许把 null、undefined 赋值给其他类型的变量
    "strictFunctionTypes": true,                  // 不允许函数参数双向协变
    "strictBindCallApply": true,                  // 严格的 bind/call/apply 检查
    "strictPropertyInitialization": true,         // 类的实例属性必须初始化
    "noImplicitThis": true,                       // 不允许 this 有隐式的 any 类型
    "alwaysStrict": true,                         // 在代码中注入'use strict'

    /* 额外检查 */
    "noUnusedLocals": true,                       // 检查只声明、未使用的局部变量(只提示不报错)
    "noUnusedParameters": true,                   // 检查未使用的函数参数(只提示不报错)
    "noImplicitReturns": true,                    // 每个分支都会有返回值
    "noFallthroughCasesInSwitch": true,           // 防止switch语句贯穿(即如果没有break语句后面不会执行)
    "noUncheckedIndexedAccess": true,             // 没有在接口里声明的对象的属性，会添加一个 undefined 类型

    /* 模块解析选项 */
    "moduleResolution": "node",                   // 模块解析策略，ts 默认用 node 的解析策略，即相对的方式导入, 'node' (Node.js) or 'classic' (TypeScript pre-1.6).
    "baseUrl": "./",                               // 解析非相对模块的基地址，默认是当前目录
    "paths": {                                    //  路径映射，相对于 baseUrl
      "/@/*": [
        "src/*"
      ]
    },
    "rootDirs": [],                               // 将多个目录放在一个虚拟目录下，用于运行时，即编译后引入文件的位置可能发生变化，这也设置可以虚拟src和out在同一个目录下，不用再去改变路径也不会报错
    "typeRoots": [],                              // 声明文件目录，默认时 node_modules/@types
    "types": [                                    // 加载的声明文件包
      "vite/client",
      "vite-plugin-svg-icons/client"
    ],
    "allowSyntheticDefaultImports": true,         // 允许从没有默认导出的模块进行默认导入。这不会影响代码发出，只会影响类型检查
    "esModuleInterop": true,                      // 允许 export 导出，由 import from 导入.
    "preserveSymlinks": true,                     // 不解析符号链接的真实路径
    "allowUmdGlobalAccess": true,                 // 允许在模块中全局变量的方式访问umd模块

    /* Source Map Options 可以精准定位到具体的错误行*/
    "sourceRoot": "",                             // 指定调试器应定位 TypeScript 文件的位置，而不是源位置。
    "mapRoot": "",                                // 指定调试器应定位映射文件的位置而不是生成的位置。
    "inlineSourceMap": true,                      // 生成目标文件的inline SourceMap，inline SourceMap会包含在生成的js文件中.
    "inlineSources": true,                        // 在单个文件中与源映射一起发出源代码；需要设置“--inlineSourceMap”或“--sourceMap”。

    /* Experimental Options 实验性选项*/
    "experimentalDecorators": true,               // 启用对 ES7 装饰器的实验性支持。
    "emitDecoratorMetadata": true,                // 启用对装饰器发出类型元数据的实验性支持。

    /* Advanced Options 高级选项 */
    "skipLibCheck": true,                         // 跳过声明文件的类型检查。
    "forceConsistentCasingInFileNames": true,     // 禁止对同一文件进行大小写不一致的引用。

  }
}
